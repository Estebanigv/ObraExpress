"use client";

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useCart } from '@/contexts/CartContext';
import { useAuth } from '@/contexts/AuthContext';
import Link from 'next/link';
import TransbankService from '@/lib/transbank';
import Image from 'next/image';
import { CartThumbnail } from '@/components/optimized-image';

interface CheckoutFormData {
  nombre: string;
  telefono: string;
  email: string;
  region: string;
  comuna: string;
  direccion: string;
  comentarios: string;
}

const regiones = [
  'Regi√≥n Metropolitana',
  'Regi√≥n de Valpara√≠so',
  'Regi√≥n del Biob√≠o',
  'Regi√≥n de La Araucan√≠a',
  'Regi√≥n de Los Lagos',
  'Regi√≥n de Antofagasta',
  'Regi√≥n de Atacama',
  'Regi√≥n de Coquimbo',
  'Regi√≥n del Maule',
  'Regi√≥n de √ëuble',
  'Regi√≥n de Los R√≠os',
  'Regi√≥n de Ays√©n',
  'Regi√≥n de Magallanes',
  'Regi√≥n de Tarapac√°',
  'Regi√≥n de Arica y Parinacota'
];

const comunasPorRegion: Record<string, string[]> = {
  'Regi√≥n Metropolitana': [
    'Santiago', 'Providencia', 'Las Condes', '√ëu√±oa', 'Maip√∫', 'La Florida', 'Puente Alto',
    'San Bernardo', 'Quilicura', 'Pe√±alol√©n', 'La Pintana', 'San Miguel', 'Renca',
    'Cerro Navia', 'Conchal√≠', 'Huechuraba', 'Independencia', 'La Cisterna', 'La Granja',
    'La Reina', 'Macul', 'Pedro Aguirre Cerda', 'Quinta Normal', 'Recoleta', 'San Joaqu√≠n',
    'San Ram√≥n', 'Vitacura', 'Lo Barnechea', 'Estaci√≥n Central', 'Cerrillos', 'Lo Espejo',
    'Lo Prado', 'El Bosque', 'Pudahuel', 'Melipilla', 'Talagante', 'Pe√±aflor', 'Curacav√≠',
    'Mar√≠a Pinto', 'San Pedro', 'Alhu√©', 'Colina', 'Lampa', 'Tiltil', 'Pirque', 'San Jos√© de Maipo',
    'Calera de Tango', 'Buin', 'Paine', 'Isla de Maipo', 'Padre Hurtado'
  ],
  'Regi√≥n de Valpara√≠so': [
    'Valpara√≠so', 'Vi√±a del Mar', 'Conc√≥n', 'Quilpu√©', 'Villa Alemana', 'Casablanca',
    'San Antonio', 'Cartagena', 'El Tabo', 'El Quisco', 'Algarrobo', 'Santo Domingo',
    'Los Andes', 'San Esteban', 'Calle Larga', 'Rinconada', 'San Felipe', 'Llaillay',
    'Panquehue', 'Catemu', 'Santa Mar√≠a', 'Putaendo', 'La Ligua', 'Cabildo', 'Papudo',
    'Zapallar', 'Petorca', 'Chincolco', 'Hijuelas', 'La Calera', 'Nogales', 'Limache',
    'Olmu√©', 'Quillota'
  ],
  'Regi√≥n del Biob√≠o': [
    'Concepci√≥n', 'Talcahuano', 'Chiguayante', 'San Pedro de la Paz', 'Hualp√©n', 'Penco',
    'Tom√©', 'Coronel', 'Lota', 'Santa Juana', 'Hualqui', 'Florida', 'Los √Ångeles',
    'Cabrero', 'Yumbel', 'Tucapel', 'Antuco', 'Quilleco', 'Santa B√°rbara', 'Quilaco',
    'Mulch√©n', 'Negrete', 'Nacimiento', 'Laja', 'San Rosendo', 'Chill√°n', 'Chill√°n Viejo',
    'El Carmen', 'Pemuco', 'Yungay', 'Bulnes', 'Quill√≥n', 'R√°nquil', 'Portezuelo',
    'Coelemu', 'Trehuaco', 'Cobquecura', 'Quirihue', 'Ninhue', 'San Carlos', '√ëiqu√©n',
    'San Fabi√°n', 'Coihueco', 'Pinto', 'San Ignacio', 'Arauco', 'Curanilahue', 'Los √Ålamos',
    'Lebu', 'Ca√±ete', 'Contulmo', 'Tir√∫a'
  ],
  'Regi√≥n de La Araucan√≠a': [
    'Temuco', 'Padre Las Casas', 'Villarrica', 'Puc√≥n', 'Freire', 'Pitrufqu√©n', 'Gorbea',
    'Loncoche', 'Tolt√©n', 'Teodoro Schmidt', 'Saavedra', 'Carahue', 'Nueva Imperial',
    'Galvarino', 'Perquenco', 'Lautaro', 'Angol', 'Renaico', 'Collipulli', 'Los Sauces',
    'Pur√©n', 'Ercilla', 'Lumaco', 'Traigu√©n', 'Victoria', 'Curacaut√≠n', 'Lonquimay',
    'Melipeuco', 'Cunco', 'Curarrehue'
  ],
  'Regi√≥n de Los Lagos': [
    'Puerto Montt', 'Puerto Varas', 'Osorno', 'Castro', 'Ancud', 'Quemchi', 'Dalcahue',
    'Curaco de V√©lez', 'Quinchao', 'Puqueld√≥n', 'Chonchi', 'Queil√©n', 'Quell√≥n',
    'La Uni√≥n', 'R√≠o Bueno', 'Lago Ranco', 'Futrono', 'Llif√©n', 'Los Lagos', 'Frutillar',
    'Fresia', 'Llanquihue', 'Maull√≠n', 'Calbuco', 'Cocham√≥', 'Puelo', 'Chait√©n',
    'Futaleuf√∫', 'Hualaihu√©', 'Palena'
  ],
  'Regi√≥n de Antofagasta': [
    'Antofagasta', 'Mejillones', 'Sierra Gorda', 'Taltal', 'Calama', 'Ollag√ºe', 'San Pedro de Atacama', 'Tocopilla', 'Mar√≠a Elena'
  ],
  'Regi√≥n de Atacama': [
    'Copiap√≥', 'Caldera', 'Tierra Amarilla', 'Vallenar', 'Alto del Carmen', 'Freirina', 'Huasco', 'Cha√±aral', 'Diego de Almagro'
  ],
  'Regi√≥n de Coquimbo': [
    'La Serena', 'Coquimbo', 'Andacollo', 'La Higuera', 'Paiguano', 'Vicu√±a', 'Ovalle',
    'Combarbal√°', 'Monte Patria', 'Punitaqui', 'R√≠o Hurtado', 'Illapel', 'Canela',
    'Los Vilos', 'Salamanca'
  ],
  'Regi√≥n del Maule': [
    'Talca', 'Constituci√≥n', 'Curepto', 'Empedrado', 'Maule', 'Pelarco', 'Pencahue',
    'R√≠o Claro', 'San Clemente', 'San Rafael', 'Cauquenes', 'Chanco', 'Pelluhue',
    'Curic√≥', 'Huala√±√©', 'Licant√©n', 'Molina', 'Rauco', 'Romeral', 'Sagrada Familia',
    'Teno', 'Vichuqu√©n', 'Linares', 'Colb√∫n', 'Longav√≠', 'Parral', 'Retiro',
    'San Javier', 'Villa Alegre', 'Yerbas Buenas'
  ],
  'Regi√≥n de √ëuble': [
    'Chill√°n', 'Chill√°n Viejo', 'Bulnes', 'El Carmen', 'Pemuco', 'Pinto', 'Quill√≥n',
    'Yungay', 'Cobquecura', 'Coelemu', 'Ninhue', 'Portezuelo', 'Quirihue', 'R√°nquil',
    'Trehuaco', 'Coihueco', '√ëiqu√©n', 'San Carlos', 'San Fabi√°n', 'San Ignacio', 'San Nicol√°s'
  ],
  'Regi√≥n de Los R√≠os': [
    'Valdivia', 'Corral', 'Lanco', 'Los Lagos', 'M√°fil', 'Mariquina', 'Paillaco',
    'Panguipulli', 'La Uni√≥n', 'Futrono', 'Lago Ranco', 'R√≠o Bueno'
  ],
  'Regi√≥n de Ays√©n': [
    'Coyhaique', 'Lago Verde', 'Ays√©n', 'Cisnes', 'Guaitecas', 'Cochrane', 'O\'Higgins',
    'Tortel', 'Chile Chico', 'R√≠o Ib√°√±ez'
  ],
  'Regi√≥n de Magallanes': [
    'Punta Arenas', 'Laguna Blanca', 'R√≠o Verde', 'San Gregorio', 'Puerto Natales',
    'Torres del Paine', 'Porvenir', 'Primavera', 'Timaukel', 'Cabo de Hornos', 'Ant√°rtica'
  ],
  'Regi√≥n de Tarapac√°': [
    'Iquique', 'Alto Hospicio', 'Pozo Almonte', 'Cami√±a', 'Colchane', 'Huara', 'Pica'
  ],
  'Regi√≥n de Arica y Parinacota': [
    'Arica', 'Camarones', 'Putre', 'General Lagos'
  ]
};

export default function CheckoutPage() {
  const router = useRouter();
  const { state: cartState, clearCart } = useCart();
  const { user } = useAuth();
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState('');
  
  const [formData, setFormData] = useState<CheckoutFormData>({
    nombre: user?.nombre || '',
    telefono: user?.telefono || '',
    email: user?.email || '',
    region: '',
    comuna: '',
    direccion: '',
    comentarios: ''
  });

  // Redirigir si el carrito est√° vac√≠o
  useEffect(() => {
    if (cartState.items.length === 0) {
      router.push('/');
    }
  }, [cartState.items, router]);

  // Calcular totales
  const subtotal = cartState.items.reduce((sum, item) => sum + item.total, 0);
  const descuentoPorcentaje = user?.porcentajeDescuento || 0;
  const descuentoMonto = subtotal * (descuentoPorcentaje / 100);
  const total = Math.round(subtotal - descuentoMonto);

  // Validar monto m√≠nimo de Transbank
  const amountValidation = TransbankService.validateAmount(total);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => {
      // Si cambia la regi√≥n, resetear la comuna
      if (name === 'region') {
        return { ...prev, [name]: value, comuna: '' };
      }
      return { ...prev, [name]: value };
    });
  };

  // Obtener comunas disponibles seg√∫n la regi√≥n seleccionada
  const comunasDisponibles = formData.region ? comunasPorRegion[formData.region] || [] : [];

  const validateForm = (): boolean => {
    const required = ['nombre', 'telefono', 'email', 'region', 'comuna', 'direccion'];
    
    for (const field of required) {
      if (!formData[field as keyof CheckoutFormData].trim()) {
        setError(`El campo ${field} es obligatorio`);
        return false;
      }
    }

    if (!formData.email.includes('@')) {
      setError('Email inv√°lido');
      return false;
    }

    return true;
  };

  const handlePayment = async () => {
    console.log('üöÄ Iniciando proceso de pago...');
    setError('');
    
    console.log('üìù Validando formulario...');
    if (!validateForm()) {
      console.log('‚ùå Formulario inv√°lido');
      return;
    }
    console.log('‚úÖ Formulario v√°lido');
    
    // Debug: Mostrar items del carrito
    console.log('üì¶ Items del carrito:', cartState.items.map(item => ({ 
      id: item.id, 
      tipo: item.tipo, 
      fechaDespacho: item.fechaDespacho 
    })));
    
    // Validaci√≥n opcional: solo advertir si faltan fechas, pero no bloquear
    const productosSinFecha = cartState.items.filter(item => 
      item.tipo === 'producto' && !item.fechaDespacho
    );
    
    if (productosSinFecha.length > 0) {
      console.log('‚ö†Ô∏è Productos sin fecha:', productosSinFecha);
      // Solo advertir, no bloquear
      console.log('‚ö†Ô∏è Advertencia: Algunos productos podr√≠an no tener fecha de despacho');
    }
    console.log('‚úÖ Continuando con el proceso de pago');
    
    console.log('üí∞ Validando monto:', { total, valid: amountValidation.valid, error: amountValidation.error });
    if (!amountValidation.valid) {
      console.log('‚ùå Monto inv√°lido:', amountValidation.error);
      setError(amountValidation.error!);
      return;
    }
    console.log('‚úÖ Monto v√°lido');

    console.log('‚è≥ Iniciando procesamiento...');
    setIsProcessing(true);

    try {
      // Crear sesi√≥n √∫nica para la transacci√≥n
      const sessionId = `polimax_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      console.log('üîë Session ID creado:', sessionId);

      // Preparar datos para la API
      const paymentData = {
        amount: total,
        cartItems: cartState.items,
        customerData: {
          userId: user?.id || null,
          nombre: formData.nombre,
          telefono: formData.telefono,
          email: formData.email,
          region: formData.region,
          comuna: formData.comuna,
          direccion: formData.direccion,
          comentarios: formData.comentarios
        },
        sessionId
      };

      console.log('üì§ Enviando datos a la API:', paymentData);

      // Crear transacci√≥n con Transbank
      const response = await fetch('/api/payment/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(paymentData)
      });

      console.log('üì• Respuesta de la API:', response.status, response.statusText);
      const result = await response.json();
      console.log('üìÑ Resultado:', result);

      if (response.ok && result.success) {
        // Limpiar carrito antes de redirigir
        clearCart();
        
        // Redirigir a Webpay Plus
        window.location.href = `${result.url}?token_ws=${result.token}`;
      } else {
        setError(result.error || 'Error al procesar el pago');
        setIsProcessing(false);
      }

    } catch (error) {
      console.error('Error en checkout:', error);
      setError('Error de conexi√≥n. Intenta nuevamente.');
      setIsProcessing(false);
    }
  };

  if (cartState.items.length === 0) {
    return null; // El useEffect ya manejar√° la redirecci√≥n
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Simple Header for Checkout */}
      <div className="bg-white shadow-sm border-b border-gray-200">
        <div className="container mx-auto px-4 py-4">
          {/* Mobile layout - justified */}
          <div className="flex items-center justify-between md:hidden">
            <div className="flex items-center">
              <Link href="/" className="flex items-center">
                <img 
                  src="/assets/images/Logotipo/polimax-isotipo-amarillo-negro.webp" 
                  alt="POLIMAX" 
                  className="h-10 w-10 object-contain" 
                />
                <span className="ml-3 text-xl font-bold text-gray-900">POLIMAX</span>
              </Link>
              <div className="ml-8 text-sm text-gray-600">
                Datos de Entrega
              </div>
            </div>
            
            <div className="flex items-center text-sm text-gray-600">
              <svg className="w-5 h-5 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
              </svg>
              Proceso de Pago Seguro
            </div>
          </div>

          {/* Desktop layout - centered */}
          <div className="hidden md:flex items-center justify-center">
            <div className="flex items-center space-x-16">
              <div className="flex items-center">
                <Link href="/" className="flex items-center">
                  <img 
                    src="/assets/images/Logotipo/polimax-isotipo-amarillo-negro.webp" 
                    alt="POLIMAX" 
                    className="h-10 w-10 object-contain" 
                  />
                  <span className="ml-3 text-xl font-bold text-gray-900">POLIMAX</span>
                </Link>
                <div className="ml-8 text-sm text-gray-600">
                  Datos de Entrega
                </div>
              </div>
              
              <div className="flex items-center text-sm text-gray-600">
                <svg className="w-5 h-5 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                </svg>
                Proceso de Pago Seguro
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold text-gray-900 mb-4">
              Finalizar Compra
            </h1>
            
            {/* Opciones de navegaci√≥n */}
            <div className="flex items-center justify-center space-x-6 text-sm">
              <Link 
                href="/" 
                className="flex items-center text-blue-600 hover:text-blue-800 transition-colors"
              >
                <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                </svg>
                Volver al Inicio
              </Link>
              
              <div className="h-4 w-px bg-gray-300"></div>
              
              <Link 
                href="/productos"
                className="flex items-center text-amber-600 hover:text-amber-800 transition-colors"
              >
                <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M9 21h6" />
                </svg>
                Ver Productos
              </Link>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            
            {/* Formulario de Datos */}
            <div className="bg-white rounded-2xl shadow-lg p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-6">
                Datos de Entrega
              </h2>

              {error && (
                <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6">
                  {error}
                </div>
              )}

              <div className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Nombre Completo *
                    </label>
                    <input
                      type="text"
                      name="nombre"
                      value={formData.nombre}
                      onChange={handleInputChange}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500"
                      placeholder="Tu nombre completo"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Tel√©fono *
                    </label>
                    <input
                      type="tel"
                      name="telefono"
                      value={formData.telefono}
                      onChange={handleInputChange}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500"
                      placeholder="+56 9 1234 5678"
                      required
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Email *
                  </label>
                  <input
                    type="email"
                    name="email"
                    value={formData.email}
                    onChange={handleInputChange}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500"
                    placeholder="tu@email.com"
                    required
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Regi√≥n *
                    </label>
                    <select
                      name="region"
                      value={formData.region}
                      onChange={handleInputChange}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500"
                      required
                    >
                      <option value="">Seleccionar regi√≥n</option>
                      {regiones.map(region => (
                        <option key={region} value={region}>{region}</option>
                      ))}
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Comuna *
                    </label>
                    <select
                      name="comuna"
                      value={formData.comuna}
                      onChange={handleInputChange}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500"
                      required
                      disabled={!formData.region}
                    >
                      <option value="">
                        {formData.region ? 'Seleccionar comuna' : 'Primero selecciona una regi√≥n'}
                      </option>
                      {comunasDisponibles.map(comuna => (
                        <option key={comuna} value={comuna}>{comuna}</option>
                      ))}
                    </select>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Direcci√≥n Completa *
                  </label>
                  <input
                    type="text"
                    name="direccion"
                    value={formData.direccion}
                    onChange={handleInputChange}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500"
                    placeholder="Calle, n√∫mero, depto/casa, referencias"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Comentarios Adicionales
                  </label>
                  <textarea
                    name="comentarios"
                    value={formData.comentarios}
                    onChange={handleInputChange}
                    rows={3}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500"
                    placeholder="Instrucciones especiales de entrega, horarios preferidos, etc."
                  />
                </div>
              </div>
            </div>

            {/* Resumen de Compra */}
            <div className="bg-white rounded-2xl shadow-lg p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-6">
                Resumen de Compra
              </h2>

              {/* Items del Carrito */}
              <div className="space-y-4 mb-6">
                {cartState.items.map((item) => (
                  <div key={item.id} className="flex items-center space-x-4 p-4 bg-gray-50 rounded-lg">
                    {item.imagen && (
                      <div className="w-16 h-16 rounded-lg overflow-hidden">
                        <CartThumbnail
                          src={item.imagen}
                          alt={item.nombre}
                          className="w-full h-full object-cover"
                        />
                      </div>
                    )}
                    <div className="flex-1">
                      <h3 className="font-medium text-gray-900">{item.nombre}</h3>
                      {item.descripcion && (
                        <p className="text-sm text-gray-600">{item.descripcion}</p>
                      )}
                      <p className="text-sm text-gray-500">
                        Cantidad: {item.cantidad} √ó {TransbankService.formatChileanAmount(item.precioUnitario)}
                      </p>
                      {item.tipo === 'producto' && item.fechaDespacho && (
                        <p className="text-xs text-green-600 mt-1">
                          üìÖ Despacho: {new Date(item.fechaDespacho).toLocaleDateString('es-CL')}
                        </p>
                      )}
                      {item.tipo === 'producto' && !item.fechaDespacho && (
                        <p className="text-xs text-red-600 mt-1">
                          ‚ö†Ô∏è Sin fecha de despacho
                        </p>
                      )}
                    </div>
                    <div className="text-right">
                      <p className="font-semibold text-gray-900">
                        {TransbankService.formatChileanAmount(item.total)}
                      </p>
                    </div>
                  </div>
                ))}
              </div>

              {/* Totales */}
              <div className="border-t border-gray-200 pt-4 space-y-2">
                <div className="flex justify-between text-gray-600">
                  <span>Subtotal:</span>
                  <span>{TransbankService.formatChileanAmount(subtotal)}</span>
                </div>
                
                {user?.tieneDescuento && descuentoPorcentaje > 0 && (
                  <div className="flex justify-between text-green-600">
                    <span>Descuento ({descuentoPorcentaje}%):</span>
                    <span>-{TransbankService.formatChileanAmount(descuentoMonto)}</span>
                  </div>
                )}
                
                <div className="flex justify-between text-lg font-bold text-gray-900 border-t border-gray-200 pt-2">
                  <span>Total:</span>
                  <span>{TransbankService.formatChileanAmount(total)}</span>
                </div>
              </div>

              {/* Informaci√≥n de Pago */}
              <div className="mt-6 p-4 bg-blue-50 rounded-lg">
                <div className="flex items-center mb-2">
                  <svg className="w-5 h-5 text-blue-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                  </svg>
                  <span className="font-medium text-blue-900">Pago Seguro con Transbank</span>
                </div>
                <p className="text-sm text-blue-800">
                  Aceptamos tarjetas de d√©bito y cr√©dito. Tu informaci√≥n est√° protegida con encriptaci√≥n SSL.
                </p>
              </div>

              {/* Validaci√≥n de Monto */}
              {!amountValidation.valid && (
                <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg">
                  <p className="text-sm text-red-700">
                    ‚ö†Ô∏è {amountValidation.error}
                  </p>
                </div>
              )}

              {/* Bot√≥n de Pago */}
              <button
                onClick={handlePayment}
                disabled={isProcessing || !amountValidation.valid}
                className={`w-full mt-6 py-4 px-6 rounded-xl font-bold text-lg transition-all ${
                  isProcessing || !amountValidation.valid
                    ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                    : 'bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white shadow-lg hover:shadow-xl transform hover:scale-[1.02]'
                }`}
              >
                {isProcessing ? (
                  <div className="flex items-center justify-center">
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                    Procesando...
                  </div>
                ) : (
                  `Pagar ${TransbankService.formatChileanAmount(total)}`
                )}
              </button>

              <p className="text-xs text-gray-500 text-center mt-2">
                Al hacer clic en "Pagar", ser√°s redirigido a Webpay Plus para completar tu pago de forma segura.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}